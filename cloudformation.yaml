
AWSTemplateFormatVersion: '2010-09-09'
Description: ebliq Datasimulation ECS Fargate
Parameters:
  ProjectName:
    Type: String
    Description: Name of the Project
    Default: default

  # EcsClusterName:
  #   Type: String
  #   Description: ECS Cluster Name
  #   Default: default

  SourceCidr:
    Type: String
    Description: 'Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0'
    Default: 0.0.0.0/0
  VpcCidrBlock:
    Type: String
    Description: Optional - CIDR/IP range for the VPC
    Default: 10.20.0.0/16
  SubnetCidrBlock1:
    Type: String
    Description: Optional - CIDR/IP range for the VPC
    Default: 10.20.0.0/24
  SubnetCidrBlock2:
    Type: String
    Description: Optional - CIDR/IP range for the VPC
    Default: 10.20.1.0/24
  EnvironmentType: 
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues: 
      - prod
      - test
    ConstraintDescription: must specify prod or test.
  ApplicationPort: 
    Type: Number
    Description: 'Port Application'
    Default: '8080'


Conditions:
  CreateProdResources: !Equals [!Ref EnvironmentType, prod]
  # SetEndpointToECSAgent: !Not [!Equals [!Ref 'EcsEndpoint', '']]
  # CreateELB: !Equals [!Ref 'CreateElasticLoadBalancer', 'true']
  # CreateEC2LCWithKeyPair: !Not [!Equals [!Ref 'KeyName', '']]
  # UseSpecifiedVpcAvailabilityZones:
  #   !Not [!Equals [!Join ['', !Ref 'VpcAvailabilityZones'], '']]
  # LaunchInstances: !Equals [!Ref 'IsFargate', 'false']
  
Resources:
  # Type: AWS::IAM::Role
  #   Properties: 
  #     AssumeRolePolicyDocument:
  #       JSON object
  #     ManagedPolicyArns:
  #       - String
  #     MaxSessionDuration: Integer
  #     Path: String
  #     PermissionsBoundary: String
  #     Policies:
  #       - Policies
  #     RoleName: String
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VpcCidrBlock'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - 
          Key: 'EnvironmentType'
          Value: !Ref EnvironmentType
  PublicSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'SubnetCidrBlock1'
      Tags: 
        - 
          Key: 'EnvironmentType'
          Value: !Ref EnvironmentType
  PublicSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'Vpc'
      CidrBlock: !Ref 'SubnetCidrBlock2'
      Tags: 
        - 
          Key: 'EnvironmentType'
          Value: !Ref EnvironmentType
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'Vpc'
      InternetGatewayId: !Ref 'InternetGateway'
  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'Vpc'
      Tags: 
        - 
          Key: 'EnvironmentType'
          Value: !Ref EnvironmentType
  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteViaIgw'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetAz1'
      RouteTableId: !Ref 'RouteViaIgw'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetAz2'
      RouteTableId: !Ref 'RouteViaIgw'
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          CidrIp: !Ref SourceCidr
      Tags: 
        - 
          Key: 'EnvironmentType'
          Value: !Ref EnvironmentType
  MyCluster:
    Type: AWS::ECS::Cluster 
  MyRepository: 
    Type: AWS::ECR::Repository
  # ContainerDefinitions Name automatisch erzeugen
  taskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn : !GetAtt IAMTaskExecution.Arn
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions: 
        - 
          Name: !Join [ '', [ 'Task', !Ref ProjectName ] ]
          Image: !Join [ '', [ '403039540759.dkr.ecr.eu-central-1.amazonaws.com/', !Ref MyRepository ] ]  
          Essential: true
          PortMappings:
          -
            ContainerPort: !Ref ApplicationPort
            HostPort: !Ref ApplicationPort
            Protocol: TCP
          Environment:
          -
            Name: 'port'
            Value: !Ref ApplicationPort
  IAMTaskExecution:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Resource: "*"
